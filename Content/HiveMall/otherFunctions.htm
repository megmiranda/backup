<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Other Functions</h1>
        <h2> CONVERT_LABEL</h2>
        <p>Signature</p>
        <p>convert_label(const int|const float)</p>
        <p>Description</p>
        <p><span class="span_5">CONVERT_LABEL</span><span class="span_4">&#160;converts from -1|1 to 0.0f|1.0f, or from 0.0f|1.0f to -1|1</span>
        </p>
        <h2> EACH_TOP_K</h2>
        <p>Signature</p>
        <p>each_top_k(int K, Object group, double cmpKey, *)</p>
        <p>Description</p>
        <p><span class="span_5">EACH_TOP_K</span><span class="span_4">&#160;returns top-K values (or tail-K values when k is less than 0).</span>
        </p>
        <h2> GENERATE_SERIES</h2>
        <p>Signature</p>
        <p>generate_series(const int|bigint start, const int|bigint end)</p>
        <p>Description</p>
        <p><span class="span_5">GENERATE_SERIES</span><span class="span_4">&#160;generates a series of values, from start to end, similar to&#160;</span><a href="http://www.postgresql.org/docs/current/static/functions-srf.html">PostgreSQL’s generate_series</a><span class="span_4">.</span>
        </p>
        <p>Example</p>
        <p><span class="span_4">SELECT generate_series(2,4);</span><span class="span_4"><br />&gt; 2</span><span class="span_4"><br />&gt; 3</span><span class="span_4"><br />&gt; 4</span><span class="span_4"><br /></span><span class="span_4"><br />SELECT generate_series(5,1,-2);</span><span class="span_4"><br />&gt; 5</span><span class="span_4"><br />&gt; 3</span><span class="span_4"><br />&gt; 1</span><span class="span_4"><br /></span><span class="span_4"><br />SELECT generate_series(4,3);</span><span class="span_4"><br /></span><span class="span_4">&gt; (no return)</span><span class="span_4"><br /></span><span class="span_4"><br />SELECT date_add(current_date(),value),value from (SELECT generate_series(1,3)) t;</span><span class="span_4"><br />&gt; 2018-04-21 1</span><span class="span_4"><br />&gt; 2018-04-22 2</span><span class="span_4"><br />&gt; 2018-04-23 3</span><span class="span_4"><br /></span><span class="span_4"><br />WITH input as (</span><span class="span_4"><br /> SELECT 1 as c1, 10 as c2, 3 as step</span><span class="span_4"><br /> UNION ALL</span><span class="span_4"><br /> SELECT 10, 2, -3</span><span class="span_4"><br />)</span><span class="span_4"><br />SELECT generate_series(c1, c2, step) as series</span><span class="span_4"><br />FROM input;</span><span class="span_4"><br />&gt; 1</span><span class="span_4"><br />&gt; 4</span><span class="span_4"><br />&gt; 7</span><span class="span_4"><br />&gt; 10</span><span class="span_4"><br />&gt; 10</span><span class="span_4"><br />&gt; 7</span><span class="span_4"><br />&gt; 4</span>
        </p>
        <h2> TRY_CAST</h2>
        <p>Signature</p>
        <p class="HTMLCode_1">try_cast(ANY src, const string typeName)</p>
        <p>Description</p>
        <p><span class="span_5">TRY_CAST</span><span class="span_4">&#160;explicitly cast a value as a type. Returns null if cast fails.</span>
        </p>
        <p>Example</p>
        <p class="HTMLPreformatted_5"><span class="span_4">SELECT try_cast(array(1.0,2.0,3.0), 'array&lt;string&gt;')</span><span class="span_4"><br />SELECT try_cast(map('A',10,'B',20,'C',30), 'map&lt;string,double&gt;')</span><span class="span_4"><br /></span>
        </p>
        <h2> X_RANK</h2>
        <p>Signature</p>
        <p>x_rank(KEY)</p>
        <p>Description</p>
        <p class="NormalWeb_9"><span class="span_5">X_RANK</span><span class="span_4">&#160;generates a pseudo sequence number starting from 1 for each key.</span>
        </p>
        <p>&#160;</p>
    </body>
</html>