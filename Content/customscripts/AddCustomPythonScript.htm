<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../Resources/Stylesheets/Styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>Adding a Custom Python Script to your Workflow</h1>
        <p>Python scripts   can be run from TD Workflow, using the Python operator (py&gt;). The workflow definition can be created using the TD Console or using TD Workflow from the command line.</p>
        <p>&#160;</p>
        <p> In the workflow definition, specify a Docker image to use for running the Python script. When the workflow task starts, a new Docker container is created based on the specified docker image. Then, the Python script is executed in the container in an isolated environment.</p>
        <ul>
            <li>
                <MadCap:xref href="#Prerequi">Prerequisites</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Installi">Installing your own Python Libraries</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Python"> Python Examples </MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Adding">Adding your Python Script to Treasure Data</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Creating">Creating a workflow that runs a Python script from the TD Console</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Creating2">Creating a workflow that runs a Python script from the command line</MadCap:xref>
            </li>
        </ul>
        <p>&#160;</p>
        <h1><a name="Prerequi"></a>Prerequisites</h1>
        <ul>
            <li>Make sure this feature is enabled for your TD&#160;account.</li>
            <li>Download and install the TD Toolbelt and the TD&#160;Toolbelt Workflow module. For more information, see <a href="https://support.treasuredata.com/hc/en-us/articles/360001262207">TD Workflow Quickstart.</a></li>
            <li>Python 3.6.8 with Anaconda 5.3.0 is supported. Your Python code must be compatible with those versions.</li>
            <li>Python 3.7 with Anaconda 2019.03 is supported. Your Python code must be compatible with those versions.</li>
            <li>Set up <a href="https://docs.docker.com/get-started/">Docker on you local machine.</a></li>
            <li>Basic Knowledge of Treasure Workflow's syntax</li>
        </ul>
        <h1><a name="Installi"></a>Installing your own Python Libraries</h1>
        <p>The Python scripts in TD Workflows are managed and run by Treasure Data in isolated Docker containers. Treasure Data provides a number of base Docker images to run in the container.</p>
        <p>&#160;</p>
        <p>In addition to the libraries provided by the Docker image, you can install additional 3rd party libraries using the pip install command within the Python script.</p>
        <p>&#160;</p>
        <p> You can pick the appropriate Docker image to run your Python script in, based on the Python version and libraries supported by the image.</p>
        <p>&#160;</p>
        <p>Older versions of Docker image require the use of the restricted user in the pip install command. </p>
        <h2>For Docker images compatible with Python 3.7 and Anaconda 2019.03:</h2>
        <p> Installing libraries to the root directory is permitted for these versions of the Docker images:</p>
        <p>&#160;</p>
        <ul>
            <li>digdag-python:3.7</li>
            <li>digdag-anaconda3:2019.03</li>
        </ul>
        <p>&#160;</p>
        <p style="text-align: left;">From within your Python script, add the following syntax to install libraries from the Python script:</p><pre>os.system(f”{sys.executable} -m pip install tensorflow”)</pre>
        <p xml:space="preserve">&#160;</p>
        <h2>For Docker images compatible with Python 3.5, Python 3.6.8, and Anaconda 5.3.0</h2>
        <p>With older versions of the Docker images, installing to the root directory is only allowed for restricted users. The pip install command must be used with the --user option and the path to the user directory must be appended to the system path, for these versions of the Docker images:</p>
        <li>
            <ul>
                <li>digdag-anaconda3:5.3.0</li>
                <li>digdag-python:3.6.8-stretch</li>
                <li>digdag-python:3.7.3-stretch</li>
            </ul>
        </li>
        <p>From within your Python script, add the following syntax to install libraries as restricted user and append to path from the Python script:</p><pre>os.system(f"{sys.executable} -m pip install --user tensorflow")</pre>
        <p>Append the PATH environment variable using sys.path.append so that the installed packages can be found. </p>
        <h1><a name="Python"></a> Python Examples </h1>
        <p>See  <a href="https://github.com/treasure-data/workflow-examples/tree/master/td/python-scripting/simple">examples</a>, for basics such as:</p>
        <ul>
            <li>How to call functions</li>
            <li>How to pass parameters to functions</li>
            <li>How to use environment variables</li>
            <li>How to import functions</li>
        </ul>
        <p>&#160;</p>
        <h1><a name="Adding"></a>Adding your Python Script to Treasure Data</h1>
        <p>If you have more than a few scripts to add, using the command line method is recommended.</p>
        <p>&#160;</p>
        <p>Using TD&#160;Console:</p>
        <ol>
            <li>Navigate to Data Workbench &gt; Workflow.</li>
            <li>Select the workflow to which you would like to add the Python scripts.</li>
            <li>Select Workflow Definition.</li>
            <li>Select Edit Workflow</li>
            <li>Select Add Workflow. For example:<br /><img src="../Resources/Images/Capture.jpg" style="width: 284px;height: 180px;" /><br /></li>
            <li>Add each script or copy paste the text of each script into the new script edit window.</li>
        </ol>
        <p>&#160;</p>
        <p>Using the command line:</p>
        <p>&#160;</p>
        <ol>
            <li>If you already have TD Toolbelt installed, update it to the latest version.</li><pre>$ td update</pre>
            <li>Now install the TD Toolbelt Workflow module by running the workflow command.</li><pre>$ td workflow</pre>
            <li>Answer Y when prompted.</li>
            <li>Navigate to the download directory and download your project:</li><pre>$ cd ~/Downloads
$ curl -o &lt;file_name&gt;.zip -L https://github.com/d4/&lt;file_name&gt;.zip</pre>
            <li>Extract the downloaded project:</li><pre>$ unzip &lt;file_name&gt;.zip</pre>
            <li>Navigate to the workflow project directory:
        <pre>$ cd &lt;file_name&gt;</pre></li>
        </ol>
        <h1><a name="Creating"></a>Creating a workflow that runs a Python script from the TD Console</h1>
        <ol>
            <li>Open your workflow definition, Data Workbench &gt; Workflows.
­</li>
            <li> Create a new workflow or open and edit an existing workflow.
­ </li>
            <li>Add the  ‘py&gt;’ operator and  specify a Docker image that you want to use.  For example:
# +py_custom_code_on_.<br /><img src="../Resources/Images/pyoperatot.png" /></li>
        </ol>
        <h1><a name="Creating2"></a>Creating a workflow that runs a Python script from the command line</h1>
        <ol>
            <li>Add a workflow definition .dig file and Python script to the workflow directory.</li>
            <li>Specify a Docker image that you want to use for the ‘py&gt;’ operator in the .dig file.</li>
            <li>Add syntax similar to the following to your workflow dig file to add the py&gt; operator and specify the Docker image. </li><pre xml:space="preserve">+&lt;wf_task_name&gt;:<br></br>py&gt;: &lt;scriptfilename&gt;docker:image: "digdag/digdag-python:3.6.8-stretch"</pre>
            <li>Add the py&gt; to the workflow to call a Python method from the script.</li>
        </ol>
        <p>&#160;</p>
        <p>For example, in the following workflow,   “python:3.6.8­stretch” is the Docker image for your Python script:
			<br /></p><pre xml:space="preserve">+simple_with_env:
py&gt;: scripts.examples.print_env


_env:
MY_ENV_VAR: "hello"
# One can use secrets as well.
# See https://support.treasuredata.com/hc/en-us/articles/360001266788-Workflows-Secrets-Management
docker:
image: "digdag/digdag-python:3.6.8-stretch"</pre>
    </body>
</html>